# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  hasReferences: Boolean
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type Folder {
  name: String!
  path: String!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  routes(relativePath: String): Routes!
  routesConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: RoutesFilter): RoutesConnection!
  join(relativePath: String): Join!
  joinConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: JoinFilter): JoinConnection!
  people(relativePath: String): People!
  peopleConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: PeopleFilter): PeopleConnection!
}

input DocumentFilter {
  routes: RoutesFilter
  join: JoinFilter
  people: PeopleFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter, folder: String): DocumentConnection!
}

union DocumentNode = Routes | Join | People | Folder

type RoutesHome {
  label: String!
  heroImage: String
  heroTitle: String!
  heroSubtitle: String
}

type RoutesAbout {
  label: String!
  heroImage: String
  heroTitle: String!
}

type RoutesResearch {
  label: String!
  heroImage: String
  heroTitle: String!
}

type RoutesPeople {
  label: String!
  heroImage: String
  heroTitle: String!
}

type RoutesCourses {
  label: String!
  heroImage: String
  heroTitle: String!
}

type RoutesSponsors {
  label: String!
  heroImage: String
  heroTitle: String!
}

type RoutesJoin {
  label: String!
  heroImage: String
  heroTitle: String!
}

type Routes implements Node & Document {
  home: RoutesHome
  about: RoutesAbout
  research: RoutesResearch
  people: RoutesPeople
  courses: RoutesCourses
  sponsors: RoutesSponsors
  join: RoutesJoin
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input RoutesHomeFilter {
  label: StringFilter
  heroImage: StringFilter
  heroTitle: StringFilter
  heroSubtitle: StringFilter
}

input RoutesAboutFilter {
  label: StringFilter
  heroImage: StringFilter
  heroTitle: StringFilter
}

input RoutesResearchFilter {
  label: StringFilter
  heroImage: StringFilter
  heroTitle: StringFilter
}

input RoutesPeopleFilter {
  label: StringFilter
  heroImage: StringFilter
  heroTitle: StringFilter
}

input RoutesCoursesFilter {
  label: StringFilter
  heroImage: StringFilter
  heroTitle: StringFilter
}

input RoutesSponsorsFilter {
  label: StringFilter
  heroImage: StringFilter
  heroTitle: StringFilter
}

input RoutesJoinFilter {
  label: StringFilter
  heroImage: StringFilter
  heroTitle: StringFilter
}

input RoutesFilter {
  home: RoutesHomeFilter
  about: RoutesAboutFilter
  research: RoutesResearchFilter
  people: RoutesPeopleFilter
  courses: RoutesCoursesFilter
  sponsors: RoutesSponsorsFilter
  join: RoutesJoinFilter
}

type RoutesConnectionEdges {
  cursor: String!
  node: Routes
}

type RoutesConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [RoutesConnectionEdges]
}

type JoinButton {
  text: String!
  url: String!
}

type Join implements Node & Document {
  title: String!
  button: JoinButton
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input JoinButtonFilter {
  text: StringFilter
  url: StringFilter
}

input JoinFilter {
  title: StringFilter
  button: JoinButtonFilter
}

type JoinConnectionEdges {
  cursor: String!
  node: Join
}

type JoinConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [JoinConnectionEdges]
}

type PeoplePeople {
  name: String!
  url: String
  img: String
  roles: [String]
  status: String!
  start: Float
  end: Float
  affiliation: String!
  now: String
}

type People implements Node & Document {
  people: [PeoplePeople]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input ImageFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input NumberFilter {
  lt: Float
  lte: Float
  gte: Float
  gt: Float
  eq: Float
  exists: Boolean
  in: [Float]
}

input PeoplePeopleFilter {
  name: StringFilter
  url: StringFilter
  img: ImageFilter
  roles: StringFilter
  status: StringFilter
  start: NumberFilter
  end: NumberFilter
  affiliation: StringFilter
  now: StringFilter
}

input PeopleFilter {
  people: PeoplePeopleFilter
}

type PeopleConnectionEdges {
  cursor: String!
  node: People
}

type PeopleConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PeopleConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentUpdateMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  createFolder(collection: String, relativePath: String!): DocumentNode!
  updateRoutes(relativePath: String!, params: RoutesMutation!): Routes!
  createRoutes(relativePath: String!, params: RoutesMutation!): Routes!
  updateJoin(relativePath: String!, params: JoinMutation!): Join!
  createJoin(relativePath: String!, params: JoinMutation!): Join!
  updatePeople(relativePath: String!, params: PeopleMutation!): People!
  createPeople(relativePath: String!, params: PeopleMutation!): People!
}

input DocumentUpdateMutation {
  routes: RoutesMutation
  join: JoinMutation
  people: PeopleMutation
  relativePath: String
}

input DocumentMutation {
  routes: RoutesMutation
  join: JoinMutation
  people: PeopleMutation
}

input RoutesHomeMutation {
  label: String
  heroImage: String
  heroTitle: String
  heroSubtitle: String
}

input RoutesAboutMutation {
  label: String
  heroImage: String
  heroTitle: String
}

input RoutesResearchMutation {
  label: String
  heroImage: String
  heroTitle: String
}

input RoutesPeopleMutation {
  label: String
  heroImage: String
  heroTitle: String
}

input RoutesCoursesMutation {
  label: String
  heroImage: String
  heroTitle: String
}

input RoutesSponsorsMutation {
  label: String
  heroImage: String
  heroTitle: String
}

input RoutesJoinMutation {
  label: String
  heroImage: String
  heroTitle: String
}

input RoutesMutation {
  home: RoutesHomeMutation
  about: RoutesAboutMutation
  research: RoutesResearchMutation
  people: RoutesPeopleMutation
  courses: RoutesCoursesMutation
  sponsors: RoutesSponsorsMutation
  join: RoutesJoinMutation
}

input JoinButtonMutation {
  text: String
  url: String
}

input JoinMutation {
  title: String
  button: JoinButtonMutation
}

input PeoplePeopleMutation {
  name: String
  url: String
  img: String
  roles: [String]
  status: String
  start: Float
  end: Float
  affiliation: String
  now: String
}

input PeopleMutation {
  people: [PeoplePeopleMutation]
}

schema {
  query: Query
  mutation: Mutation
}
