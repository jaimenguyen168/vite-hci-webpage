//@ts-nocheck
  // DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
  export function gql(strings: TemplateStringsArray, ...args: string[]): string {
    let str = ''
    strings.forEach((string, i) => {
      str += string + (args[i] || '')
    })
    return str
  }
  export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  /** References another document, used as a foreign key */
  Reference: { input: any; output: any; }
  JSON: { input: any; output: any; }
};

export type SystemInfo = {
  __typename?: 'SystemInfo';
  filename: Scalars['String']['output'];
  title?: Maybe<Scalars['String']['output']>;
  basename: Scalars['String']['output'];
  hasReferences?: Maybe<Scalars['Boolean']['output']>;
  breadcrumbs: Array<Scalars['String']['output']>;
  path: Scalars['String']['output'];
  relativePath: Scalars['String']['output'];
  extension: Scalars['String']['output'];
  template: Scalars['String']['output'];
  collection: Collection;
};


export type SystemInfoBreadcrumbsArgs = {
  excludeExtension?: InputMaybe<Scalars['Boolean']['input']>;
};

export type Folder = {
  __typename?: 'Folder';
  name: Scalars['String']['output'];
  path: Scalars['String']['output'];
};

export type PageInfo = {
  __typename?: 'PageInfo';
  hasPreviousPage: Scalars['Boolean']['output'];
  hasNextPage: Scalars['Boolean']['output'];
  startCursor: Scalars['String']['output'];
  endCursor: Scalars['String']['output'];
};

export type Node = {
  id: Scalars['ID']['output'];
};

export type Document = {
  id: Scalars['ID']['output'];
  _sys?: Maybe<SystemInfo>;
  _values: Scalars['JSON']['output'];
};

/** A relay-compliant pagination connection */
export type Connection = {
  totalCount: Scalars['Float']['output'];
  pageInfo: PageInfo;
};

export type Query = {
  __typename?: 'Query';
  getOptimizedQuery?: Maybe<Scalars['String']['output']>;
  collection: Collection;
  collections: Array<Collection>;
  node: Node;
  document: DocumentNode;
  routes: Routes;
  routesConnection: RoutesConnection;
  join: Join;
  joinConnection: JoinConnection;
  people: People;
  peopleConnection: PeopleConnection;
};


export type QueryGetOptimizedQueryArgs = {
  queryString: Scalars['String']['input'];
};


export type QueryCollectionArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
};


export type QueryNodeArgs = {
  id?: InputMaybe<Scalars['String']['input']>;
};


export type QueryDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryRoutesArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryRoutesConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<RoutesFilter>;
};


export type QueryJoinArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryJoinConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<JoinFilter>;
};


export type QueryPeopleArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryPeopleConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<PeopleFilter>;
};

export type DocumentFilter = {
  routes?: InputMaybe<RoutesFilter>;
  join?: InputMaybe<JoinFilter>;
  people?: InputMaybe<PeopleFilter>;
};

export type DocumentConnectionEdges = {
  __typename?: 'DocumentConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<DocumentNode>;
};

export type DocumentConnection = Connection & {
  __typename?: 'DocumentConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<DocumentConnectionEdges>>>;
};

export type Collection = {
  __typename?: 'Collection';
  name: Scalars['String']['output'];
  slug: Scalars['String']['output'];
  label?: Maybe<Scalars['String']['output']>;
  path: Scalars['String']['output'];
  format?: Maybe<Scalars['String']['output']>;
  matches?: Maybe<Scalars['String']['output']>;
  templates?: Maybe<Array<Maybe<Scalars['JSON']['output']>>>;
  fields?: Maybe<Array<Maybe<Scalars['JSON']['output']>>>;
  documents: DocumentConnection;
};


export type CollectionDocumentsArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<DocumentFilter>;
  folder?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentNode = Routes | Join | People | Folder;

export type RoutesHome = {
  __typename?: 'RoutesHome';
  label: Scalars['String']['output'];
  heroImage?: Maybe<Scalars['String']['output']>;
  heroTitle: Scalars['String']['output'];
  heroSubtitle?: Maybe<Scalars['String']['output']>;
};

export type RoutesAbout = {
  __typename?: 'RoutesAbout';
  label: Scalars['String']['output'];
  heroImage?: Maybe<Scalars['String']['output']>;
  heroTitle: Scalars['String']['output'];
};

export type RoutesResearch = {
  __typename?: 'RoutesResearch';
  label: Scalars['String']['output'];
  heroImage?: Maybe<Scalars['String']['output']>;
  heroTitle: Scalars['String']['output'];
};

export type RoutesPeople = {
  __typename?: 'RoutesPeople';
  label: Scalars['String']['output'];
  heroImage?: Maybe<Scalars['String']['output']>;
  heroTitle: Scalars['String']['output'];
};

export type RoutesCourses = {
  __typename?: 'RoutesCourses';
  label: Scalars['String']['output'];
  heroImage?: Maybe<Scalars['String']['output']>;
  heroTitle: Scalars['String']['output'];
};

export type RoutesSponsors = {
  __typename?: 'RoutesSponsors';
  label: Scalars['String']['output'];
  heroImage?: Maybe<Scalars['String']['output']>;
  heroTitle: Scalars['String']['output'];
};

export type RoutesJoin = {
  __typename?: 'RoutesJoin';
  label: Scalars['String']['output'];
  heroImage?: Maybe<Scalars['String']['output']>;
  heroTitle: Scalars['String']['output'];
};

export type Routes = Node & Document & {
  __typename?: 'Routes';
  home?: Maybe<RoutesHome>;
  about?: Maybe<RoutesAbout>;
  research?: Maybe<RoutesResearch>;
  people?: Maybe<RoutesPeople>;
  courses?: Maybe<RoutesCourses>;
  sponsors?: Maybe<RoutesSponsors>;
  join?: Maybe<RoutesJoin>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type StringFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type RoutesHomeFilter = {
  label?: InputMaybe<StringFilter>;
  heroImage?: InputMaybe<StringFilter>;
  heroTitle?: InputMaybe<StringFilter>;
  heroSubtitle?: InputMaybe<StringFilter>;
};

export type RoutesAboutFilter = {
  label?: InputMaybe<StringFilter>;
  heroImage?: InputMaybe<StringFilter>;
  heroTitle?: InputMaybe<StringFilter>;
};

export type RoutesResearchFilter = {
  label?: InputMaybe<StringFilter>;
  heroImage?: InputMaybe<StringFilter>;
  heroTitle?: InputMaybe<StringFilter>;
};

export type RoutesPeopleFilter = {
  label?: InputMaybe<StringFilter>;
  heroImage?: InputMaybe<StringFilter>;
  heroTitle?: InputMaybe<StringFilter>;
};

export type RoutesCoursesFilter = {
  label?: InputMaybe<StringFilter>;
  heroImage?: InputMaybe<StringFilter>;
  heroTitle?: InputMaybe<StringFilter>;
};

export type RoutesSponsorsFilter = {
  label?: InputMaybe<StringFilter>;
  heroImage?: InputMaybe<StringFilter>;
  heroTitle?: InputMaybe<StringFilter>;
};

export type RoutesJoinFilter = {
  label?: InputMaybe<StringFilter>;
  heroImage?: InputMaybe<StringFilter>;
  heroTitle?: InputMaybe<StringFilter>;
};

export type RoutesFilter = {
  home?: InputMaybe<RoutesHomeFilter>;
  about?: InputMaybe<RoutesAboutFilter>;
  research?: InputMaybe<RoutesResearchFilter>;
  people?: InputMaybe<RoutesPeopleFilter>;
  courses?: InputMaybe<RoutesCoursesFilter>;
  sponsors?: InputMaybe<RoutesSponsorsFilter>;
  join?: InputMaybe<RoutesJoinFilter>;
};

export type RoutesConnectionEdges = {
  __typename?: 'RoutesConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Routes>;
};

export type RoutesConnection = Connection & {
  __typename?: 'RoutesConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<RoutesConnectionEdges>>>;
};

export type JoinButton = {
  __typename?: 'JoinButton';
  text: Scalars['String']['output'];
  url: Scalars['String']['output'];
};

export type Join = Node & Document & {
  __typename?: 'Join';
  title: Scalars['String']['output'];
  button?: Maybe<JoinButton>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type JoinButtonFilter = {
  text?: InputMaybe<StringFilter>;
  url?: InputMaybe<StringFilter>;
};

export type JoinFilter = {
  title?: InputMaybe<StringFilter>;
  button?: InputMaybe<JoinButtonFilter>;
};

export type JoinConnectionEdges = {
  __typename?: 'JoinConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Join>;
};

export type JoinConnection = Connection & {
  __typename?: 'JoinConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<JoinConnectionEdges>>>;
};

export type PeoplePeople = {
  __typename?: 'PeoplePeople';
  name: Scalars['String']['output'];
  url?: Maybe<Scalars['String']['output']>;
  img?: Maybe<Scalars['String']['output']>;
  roles?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  status: Scalars['String']['output'];
  start?: Maybe<Scalars['Float']['output']>;
  end?: Maybe<Scalars['Float']['output']>;
  affiliation: Scalars['String']['output'];
  now?: Maybe<Scalars['String']['output']>;
};

export type People = Node & Document & {
  __typename?: 'People';
  people?: Maybe<Array<Maybe<PeoplePeople>>>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type ImageFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type NumberFilter = {
  lt?: InputMaybe<Scalars['Float']['input']>;
  lte?: InputMaybe<Scalars['Float']['input']>;
  gte?: InputMaybe<Scalars['Float']['input']>;
  gt?: InputMaybe<Scalars['Float']['input']>;
  eq?: InputMaybe<Scalars['Float']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['Float']['input']>>>;
};

export type PeoplePeopleFilter = {
  name?: InputMaybe<StringFilter>;
  url?: InputMaybe<StringFilter>;
  img?: InputMaybe<ImageFilter>;
  roles?: InputMaybe<StringFilter>;
  status?: InputMaybe<StringFilter>;
  start?: InputMaybe<NumberFilter>;
  end?: InputMaybe<NumberFilter>;
  affiliation?: InputMaybe<StringFilter>;
  now?: InputMaybe<StringFilter>;
};

export type PeopleFilter = {
  people?: InputMaybe<PeoplePeopleFilter>;
};

export type PeopleConnectionEdges = {
  __typename?: 'PeopleConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<People>;
};

export type PeopleConnection = Connection & {
  __typename?: 'PeopleConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<PeopleConnectionEdges>>>;
};

export type Mutation = {
  __typename?: 'Mutation';
  addPendingDocument: DocumentNode;
  updateDocument: DocumentNode;
  deleteDocument: DocumentNode;
  createDocument: DocumentNode;
  createFolder: DocumentNode;
  updateRoutes: Routes;
  createRoutes: Routes;
  updateJoin: Join;
  createJoin: Join;
  updatePeople: People;
  createPeople: People;
};


export type MutationAddPendingDocumentArgs = {
  collection: Scalars['String']['input'];
  relativePath: Scalars['String']['input'];
  template?: InputMaybe<Scalars['String']['input']>;
};


export type MutationUpdateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
  params: DocumentUpdateMutation;
};


export type MutationDeleteDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
};


export type MutationCreateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
  params: DocumentMutation;
};


export type MutationCreateFolderArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
};


export type MutationUpdateRoutesArgs = {
  relativePath: Scalars['String']['input'];
  params: RoutesMutation;
};


export type MutationCreateRoutesArgs = {
  relativePath: Scalars['String']['input'];
  params: RoutesMutation;
};


export type MutationUpdateJoinArgs = {
  relativePath: Scalars['String']['input'];
  params: JoinMutation;
};


export type MutationCreateJoinArgs = {
  relativePath: Scalars['String']['input'];
  params: JoinMutation;
};


export type MutationUpdatePeopleArgs = {
  relativePath: Scalars['String']['input'];
  params: PeopleMutation;
};


export type MutationCreatePeopleArgs = {
  relativePath: Scalars['String']['input'];
  params: PeopleMutation;
};

export type DocumentUpdateMutation = {
  routes?: InputMaybe<RoutesMutation>;
  join?: InputMaybe<JoinMutation>;
  people?: InputMaybe<PeopleMutation>;
  relativePath?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentMutation = {
  routes?: InputMaybe<RoutesMutation>;
  join?: InputMaybe<JoinMutation>;
  people?: InputMaybe<PeopleMutation>;
};

export type RoutesHomeMutation = {
  label?: InputMaybe<Scalars['String']['input']>;
  heroImage?: InputMaybe<Scalars['String']['input']>;
  heroTitle?: InputMaybe<Scalars['String']['input']>;
  heroSubtitle?: InputMaybe<Scalars['String']['input']>;
};

export type RoutesAboutMutation = {
  label?: InputMaybe<Scalars['String']['input']>;
  heroImage?: InputMaybe<Scalars['String']['input']>;
  heroTitle?: InputMaybe<Scalars['String']['input']>;
};

export type RoutesResearchMutation = {
  label?: InputMaybe<Scalars['String']['input']>;
  heroImage?: InputMaybe<Scalars['String']['input']>;
  heroTitle?: InputMaybe<Scalars['String']['input']>;
};

export type RoutesPeopleMutation = {
  label?: InputMaybe<Scalars['String']['input']>;
  heroImage?: InputMaybe<Scalars['String']['input']>;
  heroTitle?: InputMaybe<Scalars['String']['input']>;
};

export type RoutesCoursesMutation = {
  label?: InputMaybe<Scalars['String']['input']>;
  heroImage?: InputMaybe<Scalars['String']['input']>;
  heroTitle?: InputMaybe<Scalars['String']['input']>;
};

export type RoutesSponsorsMutation = {
  label?: InputMaybe<Scalars['String']['input']>;
  heroImage?: InputMaybe<Scalars['String']['input']>;
  heroTitle?: InputMaybe<Scalars['String']['input']>;
};

export type RoutesJoinMutation = {
  label?: InputMaybe<Scalars['String']['input']>;
  heroImage?: InputMaybe<Scalars['String']['input']>;
  heroTitle?: InputMaybe<Scalars['String']['input']>;
};

export type RoutesMutation = {
  home?: InputMaybe<RoutesHomeMutation>;
  about?: InputMaybe<RoutesAboutMutation>;
  research?: InputMaybe<RoutesResearchMutation>;
  people?: InputMaybe<RoutesPeopleMutation>;
  courses?: InputMaybe<RoutesCoursesMutation>;
  sponsors?: InputMaybe<RoutesSponsorsMutation>;
  join?: InputMaybe<RoutesJoinMutation>;
};

export type JoinButtonMutation = {
  text?: InputMaybe<Scalars['String']['input']>;
  url?: InputMaybe<Scalars['String']['input']>;
};

export type JoinMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  button?: InputMaybe<JoinButtonMutation>;
};

export type PeoplePeopleMutation = {
  name?: InputMaybe<Scalars['String']['input']>;
  url?: InputMaybe<Scalars['String']['input']>;
  img?: InputMaybe<Scalars['String']['input']>;
  roles?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  status?: InputMaybe<Scalars['String']['input']>;
  start?: InputMaybe<Scalars['Float']['input']>;
  end?: InputMaybe<Scalars['Float']['input']>;
  affiliation?: InputMaybe<Scalars['String']['input']>;
  now?: InputMaybe<Scalars['String']['input']>;
};

export type PeopleMutation = {
  people?: InputMaybe<Array<InputMaybe<PeoplePeopleMutation>>>;
};

export type RoutesPartsFragment = { __typename: 'Routes', home?: { __typename: 'RoutesHome', label: string, heroImage?: string | null, heroTitle: string, heroSubtitle?: string | null } | null, about?: { __typename: 'RoutesAbout', label: string, heroImage?: string | null, heroTitle: string } | null, research?: { __typename: 'RoutesResearch', label: string, heroImage?: string | null, heroTitle: string } | null, people?: { __typename: 'RoutesPeople', label: string, heroImage?: string | null, heroTitle: string } | null, courses?: { __typename: 'RoutesCourses', label: string, heroImage?: string | null, heroTitle: string } | null, sponsors?: { __typename: 'RoutesSponsors', label: string, heroImage?: string | null, heroTitle: string } | null, join?: { __typename: 'RoutesJoin', label: string, heroImage?: string | null, heroTitle: string } | null };

export type JoinPartsFragment = { __typename: 'Join', title: string, button?: { __typename: 'JoinButton', text: string, url: string } | null };

export type PeoplePartsFragment = { __typename: 'People', people?: Array<{ __typename: 'PeoplePeople', name: string, url?: string | null, img?: string | null, roles?: Array<string | null> | null, status: string, start?: number | null, end?: number | null, affiliation: string, now?: string | null } | null> | null };

export type RoutesQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type RoutesQuery = { __typename?: 'Query', routes: { __typename: 'Routes', id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, home?: { __typename: 'RoutesHome', label: string, heroImage?: string | null, heroTitle: string, heroSubtitle?: string | null } | null, about?: { __typename: 'RoutesAbout', label: string, heroImage?: string | null, heroTitle: string } | null, research?: { __typename: 'RoutesResearch', label: string, heroImage?: string | null, heroTitle: string } | null, people?: { __typename: 'RoutesPeople', label: string, heroImage?: string | null, heroTitle: string } | null, courses?: { __typename: 'RoutesCourses', label: string, heroImage?: string | null, heroTitle: string } | null, sponsors?: { __typename: 'RoutesSponsors', label: string, heroImage?: string | null, heroTitle: string } | null, join?: { __typename: 'RoutesJoin', label: string, heroImage?: string | null, heroTitle: string } | null } };

export type RoutesConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<RoutesFilter>;
}>;


export type RoutesConnectionQuery = { __typename?: 'Query', routesConnection: { __typename?: 'RoutesConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'RoutesConnectionEdges', cursor: string, node?: { __typename: 'Routes', id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, home?: { __typename: 'RoutesHome', label: string, heroImage?: string | null, heroTitle: string, heroSubtitle?: string | null } | null, about?: { __typename: 'RoutesAbout', label: string, heroImage?: string | null, heroTitle: string } | null, research?: { __typename: 'RoutesResearch', label: string, heroImage?: string | null, heroTitle: string } | null, people?: { __typename: 'RoutesPeople', label: string, heroImage?: string | null, heroTitle: string } | null, courses?: { __typename: 'RoutesCourses', label: string, heroImage?: string | null, heroTitle: string } | null, sponsors?: { __typename: 'RoutesSponsors', label: string, heroImage?: string | null, heroTitle: string } | null, join?: { __typename: 'RoutesJoin', label: string, heroImage?: string | null, heroTitle: string } | null } | null } | null> | null } };

export type JoinQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type JoinQuery = { __typename?: 'Query', join: { __typename: 'Join', id: string, title: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, button?: { __typename: 'JoinButton', text: string, url: string } | null } };

export type JoinConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<JoinFilter>;
}>;


export type JoinConnectionQuery = { __typename?: 'Query', joinConnection: { __typename?: 'JoinConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'JoinConnectionEdges', cursor: string, node?: { __typename: 'Join', id: string, title: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, button?: { __typename: 'JoinButton', text: string, url: string } | null } | null } | null> | null } };

export type PeopleQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type PeopleQuery = { __typename?: 'Query', people: { __typename: 'People', id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, people?: Array<{ __typename: 'PeoplePeople', name: string, url?: string | null, img?: string | null, roles?: Array<string | null> | null, status: string, start?: number | null, end?: number | null, affiliation: string, now?: string | null } | null> | null } };

export type PeopleConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<PeopleFilter>;
}>;


export type PeopleConnectionQuery = { __typename?: 'Query', peopleConnection: { __typename?: 'PeopleConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'PeopleConnectionEdges', cursor: string, node?: { __typename: 'People', id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, people?: Array<{ __typename: 'PeoplePeople', name: string, url?: string | null, img?: string | null, roles?: Array<string | null> | null, status: string, start?: number | null, end?: number | null, affiliation: string, now?: string | null } | null> | null } | null } | null> | null } };

export const RoutesPartsFragmentDoc = gql`
    fragment RoutesParts on Routes {
  __typename
  home {
    __typename
    label
    heroImage
    heroTitle
    heroSubtitle
  }
  about {
    __typename
    label
    heroImage
    heroTitle
  }
  research {
    __typename
    label
    heroImage
    heroTitle
  }
  people {
    __typename
    label
    heroImage
    heroTitle
  }
  courses {
    __typename
    label
    heroImage
    heroTitle
  }
  sponsors {
    __typename
    label
    heroImage
    heroTitle
  }
  join {
    __typename
    label
    heroImage
    heroTitle
  }
}
    `;
export const JoinPartsFragmentDoc = gql`
    fragment JoinParts on Join {
  __typename
  title
  button {
    __typename
    text
    url
  }
}
    `;
export const PeoplePartsFragmentDoc = gql`
    fragment PeopleParts on People {
  __typename
  people {
    __typename
    name
    url
    img
    roles
    status
    start
    end
    affiliation
    now
  }
}
    `;
export const RoutesDocument = gql`
    query routes($relativePath: String!) {
  routes(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...RoutesParts
  }
}
    ${RoutesPartsFragmentDoc}`;
export const RoutesConnectionDocument = gql`
    query routesConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: RoutesFilter) {
  routesConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...RoutesParts
      }
    }
  }
}
    ${RoutesPartsFragmentDoc}`;
export const JoinDocument = gql`
    query join($relativePath: String!) {
  join(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...JoinParts
  }
}
    ${JoinPartsFragmentDoc}`;
export const JoinConnectionDocument = gql`
    query joinConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: JoinFilter) {
  joinConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...JoinParts
      }
    }
  }
}
    ${JoinPartsFragmentDoc}`;
export const PeopleDocument = gql`
    query people($relativePath: String!) {
  people(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...PeopleParts
  }
}
    ${PeoplePartsFragmentDoc}`;
export const PeopleConnectionDocument = gql`
    query peopleConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: PeopleFilter) {
  peopleConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...PeopleParts
      }
    }
  }
}
    ${PeoplePartsFragmentDoc}`;
export type Requester<C= {}> = <R, V>(doc: DocumentNode, vars?: V, options?: C) => Promise<R>
  export function getSdk<C>(requester: Requester<C>) {
    return {
      routes(variables: RoutesQueryVariables, options?: C): Promise<{data: RoutesQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: RoutesQueryVariables, query: string}> {
        return requester<{data: RoutesQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: RoutesQueryVariables, query: string}, RoutesQueryVariables>(RoutesDocument, variables, options);
      },
    routesConnection(variables?: RoutesConnectionQueryVariables, options?: C): Promise<{data: RoutesConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: RoutesConnectionQueryVariables, query: string}> {
        return requester<{data: RoutesConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: RoutesConnectionQueryVariables, query: string}, RoutesConnectionQueryVariables>(RoutesConnectionDocument, variables, options);
      },
    join(variables: JoinQueryVariables, options?: C): Promise<{data: JoinQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: JoinQueryVariables, query: string}> {
        return requester<{data: JoinQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: JoinQueryVariables, query: string}, JoinQueryVariables>(JoinDocument, variables, options);
      },
    joinConnection(variables?: JoinConnectionQueryVariables, options?: C): Promise<{data: JoinConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: JoinConnectionQueryVariables, query: string}> {
        return requester<{data: JoinConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: JoinConnectionQueryVariables, query: string}, JoinConnectionQueryVariables>(JoinConnectionDocument, variables, options);
      },
    people(variables: PeopleQueryVariables, options?: C): Promise<{data: PeopleQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PeopleQueryVariables, query: string}> {
        return requester<{data: PeopleQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PeopleQueryVariables, query: string}, PeopleQueryVariables>(PeopleDocument, variables, options);
      },
    peopleConnection(variables?: PeopleConnectionQueryVariables, options?: C): Promise<{data: PeopleConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PeopleConnectionQueryVariables, query: string}> {
        return requester<{data: PeopleConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PeopleConnectionQueryVariables, query: string}, PeopleConnectionQueryVariables>(PeopleConnectionDocument, variables, options);
      }
    };
  }
  export type Sdk = ReturnType<typeof getSdk>;

// TinaSDK generated code
import { createClient, TinaClient } from "tinacms/dist/client";

const generateRequester = (
  client: TinaClient,
) => {
  const requester: (
    doc: any,
    vars?: any,
    options?: {
      branch?: string,
      /**
       * Aside from `method` and `body`, all fetch options are passed
       * through to underlying fetch request
       */
      fetchOptions?: Omit<Parameters<typeof fetch>[1], 'body' | 'method'>,
    },
    client
  ) => Promise<any> = async (doc, vars, options) => {
    let url = client.apiUrl
    if (options?.branch) {
      const index = client.apiUrl.lastIndexOf('/')
      url = client.apiUrl.substring(0, index + 1) + options.branch
    }
    const data = await client.request({
      query: doc,
      variables: vars,
      url,
    }, options)

    return { data: data?.data, errors: data?.errors, query: doc, variables: vars || {} }
  }

  return requester
}

/**
 * @experimental this class can be used but may change in the future
 **/
export const ExperimentalGetTinaClient = () =>
  getSdk(
    generateRequester(
      createClient({
        url: "http://localhost:4001/graphql",
        queries,
      })
    )
  )

export const queries = (
  client: TinaClient,
) => {
  const requester = generateRequester(client)
  return getSdk(requester)
}

  